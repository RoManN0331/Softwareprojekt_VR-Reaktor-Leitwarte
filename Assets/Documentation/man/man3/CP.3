.TH "CP" 3 "Version 0.1" "NPP VR Simulation" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CP \- This class is used to control the condenser pump in an NPP simulation\&.  

.SH SYNOPSIS
.br
.PP
.PP
Inherits MonoBehaviour\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBSetPercentFromExternal\fP (int percent)"
.br
.RI "This method sets the percentage value of the switch based on an external input\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "GameObject \fBto_rotate\fP"
.br
.ti -1c
.RI "int \fBPercent\fP = 0"
.br
.RI "
.PP
\fBParameters\fP
.RS 4
\fIPercent\fP specifies the percentage the switch has been rotated based on its leftmost position
.RE
.PP
"
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "enum \fBReglerTypeEnum\fP { \fBGenau\fP = 0, \fBBinaer\fP = 1 }"
.br
.RI "This Enum defines two types of rotary switches binary and exact\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBStart\fP ()"
.br
.RI "This method initializes the \fBCP\fP instance and sets the initial rotation of the switch\&. "
.ti -1c
.RI "void \fBUpdate\fP ()"
.br
.RI "This method updates the rotation of the switch based on the current value of Percent\&. "
.ti -1c
.RI "void \fBUpdateRotation\fP ()"
.br
.RI "This method updates the rotation of the switch\&. "
.ti -1c
.RI "void \fBHandleRotationInteraction\fP ()"
.br
.RI "This method computes the rotation of the handle based on the rotation of the interactor and calls \fBUpdateRotation()\fP to update the rotation of the switch as well as \fBSendPercentToSimulation()\fP to intiate a call to the REST Server to update the simulation\&. "
.ti -1c
.RI "void \fBSendPercentToSimulation\fP ()"
.br
.RI "This method initiates a call to the REST Server to update the simulation with the current RPM value of the condenser pump\&. "
.ti -1c
.RI "void \fBOnEnable\fP ()"
.br
.RI "This method is called when the object is enabled and adds event listeners for the selectEntered and selectExited events\&. "
.ti -1c
.RI "void \fBOnDisable\fP ()"
.br
.RI "This method is called when the object is disabled and removes event listeners for the selectEntered and selectExited events\&. "
.ti -1c
.RI "void \fBOnSelectEntered\fP (SelectEnterEventArgs args)"
.br
.RI "This method is called when an interactor enters the object and sets the interactor and initialInteractorRotation values\&. "
.ti -1c
.RI "void \fBOnSelectExited\fP (SelectExitEventArgs args)"
.br
.RI "This method is called when an interactor exits the object and resets the isInteracting and interactor values\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBReglerTypeEnum\fP \fBReglerType\fP = \fBReglerTypeEnum\&.Genau\fP"
.br
.RI "
.PP
\fBParameters\fP
.RS 4
\fIReglerType\fP specifies the type of rotary switch
.RE
.PP
"
.ti -1c
.RI "int \fBStartRotation\fP = \-90"
.br
.RI "param name="EndRotation"> specifies the angle of the switches rightmost position"
.ti -1c
.RI "int \fBEndRotation\fP = 90"
.br
.RI "param name="lastPressTime"> specifies the last time the player didinteract with the switch"
.ti -1c
.RI "float \fBlastPressTime\fP = 0f"
.br
.RI "param name="pressCooldown"> specifies a cooldown between interactions with the switch"
.ti -1c
.RI "float \fBpressCooldown\fP = 0\&.1f"
.br
.ti -1c
.RI "UnityEngine\&.XR\&.Interaction\&.Toolkit\&.Interactors\&.XRBaseInteractor \fBinteractor\fP"
.br
.RI "
.PP
\fBParameters\fP
.RS 4
\fIinteractor\fP is a reference to an interactor
.RE
.PP
"
.ti -1c
.RI "bool \fBisInteracting\fP = false"
.br
.RI "param name="initialInteractorPosition"> is a Vector3 specifying the initial position of the interactor"
.ti -1c
.RI "Vector3 \fBinitialInteractorPosition\fP"
.br
.RI "param name="initialPercent"> specifies the initinal percentage the switch has already been rotated"
.ti -1c
.RI "int \fBinitialPercent\fP"
.br
.RI "param name="previousPercent"> specifies the percentage by which the switch was rotated in the last frame"
.ti -1c
.RI "int \fBpreviousPercent\fP"
.br
.RI "param name="initialInteractorRotation"> is a Quaternion specifying the initial rotation of the interactor upon interaction"
.ti -1c
.RI "Quaternion \fBinitialInteractorRotation\fP"
.br
.RI "param name="nppClient"> is a reference to a \fBNPPClient\fP instance in the scene"
.ti -1c
.RI "\fBNPPClient\fP \fBnppClient\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class is used to control the condenser pump in an NPP simulation\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBCP\&.ReglerTypeEnum\fP\fR [private]\fP"

.PP
This Enum defines two types of rotary switches binary and exact\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BIGenau \fP
.TP
\f(BIBinaer \fP
.SH "Member Function Documentation"
.PP 
.SS "void CP\&.HandleRotationInteraction ()\fR [private]\fP"

.PP
This method computes the rotation of the handle based on the rotation of the interactor and calls \fBUpdateRotation()\fP to update the rotation of the switch as well as \fBSendPercentToSimulation()\fP to intiate a call to the REST Server to update the simulation\&. 
.SS "void CP\&.OnDisable ()\fR [private]\fP"

.PP
This method is called when the object is disabled and removes event listeners for the selectEntered and selectExited events\&. 
.SS "void CP\&.OnEnable ()\fR [private]\fP"

.PP
This method is called when the object is enabled and adds event listeners for the selectEntered and selectExited events\&. 
.SS "void CP\&.OnSelectEntered (SelectEnterEventArgs args)\fR [private]\fP"

.PP
This method is called when an interactor enters the object and sets the interactor and initialInteractorRotation values\&. 
.PP
\fBParameters\fP
.RS 4
\fIargs\fP passes event specific arguments upon entering the interaction
.RE
.PP

.SS "void CP\&.OnSelectExited (SelectExitEventArgs args)\fR [private]\fP"

.PP
This method is called when an interactor exits the object and resets the isInteracting and interactor values\&. 
.PP
\fBParameters\fP
.RS 4
\fIargs\fP passes event specific arguments upon exiting the interaction
.RE
.PP

.SS "void CP\&.SendPercentToSimulation ()\fR [private]\fP"

.PP
This method initiates a call to the REST Server to update the simulation with the current RPM value of the condenser pump\&. 
.SS "void CP\&.SetPercentFromExternal (int percent)"

.PP
This method sets the percentage value of the switch based on an external input\&. 
.PP
\fBParameters\fP
.RS 4
\fIpercent\fP specifies the percentage value to set the switch to
.RE
.PP

.SS "void CP\&.Start ()\fR [private]\fP"

.PP
This method initializes the \fBCP\fP instance and sets the initial rotation of the switch\&. 
.SS "void CP\&.Update ()\fR [private]\fP"

.PP
This method updates the rotation of the switch based on the current value of Percent\&. Additionally a call to the REST Server is initiated via \fBSendPercentToSimulation()\fP to update the simulation\&. 
.SS "void CP\&.UpdateRotation ()\fR [private]\fP"

.PP
This method updates the rotation of the switch\&. 
.SH "Member Data Documentation"
.PP 
.SS "int CP\&.EndRotation = 90\fR [private]\fP"

.PP
param name="lastPressTime"> specifies the last time the player didinteract with the switch
.SS "Vector3 CP\&.initialInteractorPosition\fR [private]\fP"

.PP
param name="initialPercent"> specifies the initinal percentage the switch has already been rotated
.SS "Quaternion CP\&.initialInteractorRotation\fR [private]\fP"

.PP
param name="nppClient"> is a reference to a \fBNPPClient\fP instance in the scene
.SS "int CP\&.initialPercent\fR [private]\fP"

.PP
param name="previousPercent"> specifies the percentage by which the switch was rotated in the last frame
.SS "UnityEngine\&.XR\&.Interaction\&.Toolkit\&.Interactors\&.XRBaseInteractor CP\&.interactor\fR [private]\fP"

.PP

.PP
\fBParameters\fP
.RS 4
\fIinteractor\fP is a reference to an interactor
.RE
.PP
param name="isInteracting"> tracks whether the player is currently interacting with the switch
.SS "bool CP\&.isInteracting = false\fR [private]\fP"

.PP
param name="initialInteractorPosition"> is a Vector3 specifying the initial position of the interactor
.SS "float CP\&.lastPressTime = 0f\fR [private]\fP"

.PP
param name="pressCooldown"> specifies a cooldown between interactions with the switch
.SS "\fBNPPClient\fP CP\&.nppClient\fR [private]\fP"

.SS "int CP\&.Percent = 0"

.PP

.PP
\fBParameters\fP
.RS 4
\fIPercent\fP specifies the percentage the switch has been rotated based on its leftmost position
.RE
.PP
param name="StartRotation"> specifies the angle of the switches leftmost position
.SS "float CP\&.pressCooldown = 0\&.1f\fR [private]\fP"

.SS "int CP\&.previousPercent\fR [private]\fP"

.PP
param name="initialInteractorRotation"> is a Quaternion specifying the initial rotation of the interactor upon interaction
.SS "\fBReglerTypeEnum\fP CP\&.ReglerType = \fBReglerTypeEnum\&.Genau\fP\fR [private]\fP"

.PP

.PP
\fBParameters\fP
.RS 4
\fIReglerType\fP specifies the type of rotary switch
.RE
.PP
param name="to_rotate"> specifies the handle the player must interact with to rotate the switch
.SS "int CP\&.StartRotation = \-90\fR [private]\fP"

.PP
param name="EndRotation"> specifies the angle of the switches rightmost position
.SS "GameObject CP\&.to_rotate"


.SH "Author"
.PP 
Generated automatically by Doxygen for NPP VR Simulation from the source code\&.
